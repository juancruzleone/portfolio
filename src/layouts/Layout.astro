---
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import { ui, defaultLang } from '../i18n/ui';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Definir la URL canónica
const canonicalUrl = 'https://www.juancruzleone.dev';
---

<!doctype html>
<html lang={lang}>
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Juan Cruz Leone - Desarrollador Frontend de 21 años de Argentina. Especializado en crear interfaces intuitivas y bien estructuradas, con enfoque en código limpio y optimización de rendimiento. Graduado en Diseño y Programación Web del Instituto Da Vinci." />
    <meta name="keywords" content="Juan Cruz Leone, Frontend Developer, Web Development, Portfolio, Argentina, Buenos Aires, Instituto Da Vinci, UI/UX, Diseño Web, Programación Web, React, JavaScript, HTML, CSS, Optimización de rendimiento, Experiencia de usuario" />
    <meta name="author" content="Juan Cruz Leone" />
    <meta name="robots" content="index, follow" />
    <meta name="theme-color" content="#121212" />

    <!-- Canonical URL para SEO -->
    <link rel="canonical" href={canonicalUrl} />

    <!-- Publisher (opcional, aunque su uso es limitado) -->
    <link rel="publisher" href="https://www.juancruzleone.dev" />

    <!-- Open Graph Meta Tags para redes sociales -->
    <meta property="og:title" content="Juan Cruz Leone | Portfolio de Desarrollador Frontend" />
    <meta property="og:description" content="Desarrollador Frontend de 21 años de Argentina. Creando interfaces intuitivas y optimizando rendimiento web. Graduado del Instituto Da Vinci en Diseño y Programación Web." />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:image" content="https://www.juancruzleone.dev/logo-3.svg" /> <!-- Agrega una imagen relevante para redes sociales -->
    <meta property="og:site_name" content="Juan Cruz Leone | Portfolio" />

    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Juan Cruz Leone | Portfolio de Desarrollador Frontend" />
    <meta name="twitter:description" content="Desarrollador Frontend de 21 años de Argentina. Especializado en interfaces intuitivas y optimización de rendimiento. Graduado en Diseño y Programación Web." />
    <meta name="twitter:url" content={canonicalUrl} />
    <meta name="twitter:image" content="https://www.juancruzleone.dev/logo-3.svg" /> <!-- Agrega una imagen relevante para Twitter -->

    <!-- Geo Tags -->
    <meta name="geo.region" content="AR-B" />
    <meta name="geo.placename" content="Buenos Aires" />
    <meta name="geo.position" content="-34.6037;-58.3816" />
    <meta name="ICBM" content="-34.6037, -58.3816" />

    <link rel="icon" type="image/svg+xml" href="/logo-3.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Juan Cruz Leone | Portfolio de Desarrollador Frontend</title>

    <!-- Estilos iniciales para evitar el parpadeo -->
    <style>
        :root {
            --bg-principal-light: #ffffff;
            --bg-principal-dark: #121212;
        }

        body {
            background-color: var(--bg-principal-dark);
        }

        .light body {
            background-color: var(--bg-principal-light);
        }

        #themeIcon {
            content: url('/luna.svg');
        }

        .light #themeIcon {
            content: url('/sol.svg');
        }

        #langIcon {
            content: url('/traductor.svg');
        }
    </style>

    <!-- Script para aplicar el tema antes de que el DOM se cargue -->
    <script is:inline>
        (function() {
            const savedTheme = localStorage.getItem('theme') || 'dark';
            const savedLang = localStorage.getItem('lang') || 'es';
            document.documentElement.classList.add(savedTheme);
            document.documentElement.lang = savedLang;
        })();
    </script>
</head>
<body class="bg-principal-light dark:bg-principal transition-colors duration-300">
    <div class="max-w-[1000px] mx-auto mt-10 px-4">
        <header class="sticky top-0 z-50">
            <nav class="border border-contenedor bg-black rounded-md p-6 pl-4 relative">
                <div class="flex justify-between items-center">
                    <button id="menuToggle" class="md:hidden text-white focus:outline-none" aria-label={t('nav.navMenu')}>
                        <svg class="w-8 h-8" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
                        </svg>
                    </button>
                    <ul id="navMenu" class="hidden md:flex flex-col md:flex-row md:items-center w-full md:w-auto absolute md:static top-full left-0 bg-black md:bg-transparent rounded-md shadow-lg md:shadow-none md:space-x-6 p-4 md:p-0 transition-all duration-300 ease-in-out">
                        <li><a href="#home" class="text-white font-montserrat text-base block md:inline m-2 md:m-0 hover:border-b-[2px] border-white" data-i18n="nav.home" title={lang === 'es' ? 'Inicio' : 'Home'}>{t('nav.home')}</a></li>
                        <li><a href="#about-me" class="text-white font-montserrat text-base block md:inline m-2 md:m-0 hover:border-b-[2px] border-white" data-i18n="nav.aboutme" title={lang === 'es' ? 'Sobre mí' : 'About me'}>{t('nav.aboutme')}</a></li>
                        <li><a href="#skills" class="text-white font-montserrat text-base block md:inline m-2 md:m-0 hover:border-b-[2px] border-white" data-i18n="nav.skills" title={lang === 'es' ? 'Habilidades' : 'Skills'}>{t('nav.skills')}</a></li>
                        <li><a href="#projects" class="text-white font-montserrat text-base block md:inline m-2 md:m-0 hover:border-b-[2px] border-white" data-i18n="nav.projects" title={lang === 'es' ? 'Proyectos' : 'Projects'}>{t('nav.projects')}</a></li>
                        <li><a href="#contact" class="text-white font-montserrat text-base block md:inline m-2 md:m-0 hover:border-b-[2px] border-white" data-i18n="nav.contact" title={lang === 'es' ? 'Contacto' : 'Contact'}>{t('nav.contact')}</a></li>
                        <li><a href="cv-juancruzleone.pdf" target="_blank" rel="noopener noreferrer" class="text-white font-montserrat text-base block md:inline m-2 md:m-0 border border-white p-1 rounded hover:bg-[#2d2d2d] dark:hover:bg-[#2d2d2d]" data-i18n="nav.buttonCV" title={lang === 'es' ? 'Descargar CV' : 'Download CV'}>{t('nav.buttonCV')}</a></li>
                    </ul>
                    <div class="flex">
                        <button id="themeSwitch" class="border border-contenedor rounded mr-4 bg-black hover:bg-[#2d2d2d] hover:dark:bg-[#2d2d2d]">
                            <img id="themeIcon" alt={lang === 'es' ? "Cambiar tema" : "Change theme"} title={lang === 'es' ? "Cambiar tema" : "Change theme"} width="30" height="30" class="p-2 pb-2">
                        </button>
                        <button id="langSwitch" class="border border-contenedor rounded bg-black hover:bg-[#2d2d2d] hover:dark:bg-[#2d2d2d]">
                            <img id="langIcon" alt={lang === 'es' ? "Cambiar idioma" : "Change language"} title={lang === 'es' ? "Cambiar idioma" : "Change language"} width="30" height="30" class="p-2 pb-2">
                        </button>
                    </div>
                </div>
            </nav>
        </header>
        <slot />
    </div>

    <script define:vars={{ initialLang: lang, ui }}>
        let currentLang = localStorage.getItem('lang') || initialLang;
        let currentTheme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';

        function switchLanguage() {
            currentLang = currentLang === 'en' ? 'es' : 'en';
            localStorage.setItem('lang', currentLang);
            updateContent();
        }

        function switchTheme() {
            currentTheme = currentTheme === 'light' ? 'dark' : 'light';
            localStorage.setItem('theme', currentTheme);
            updateTheme();
        }

        function updateContent() {
            document.querySelectorAll('[data-i18n]').forEach(el => {
                const key = el.getAttribute('data-i18n');
                if (key) {
                    el.textContent = key.split('.').reduce((obj, k) => obj && obj[k], ui[currentLang]) || key;
                }
            });
            document.documentElement.lang = currentLang;
            updateAriaLabels();
            updateAltTexts();
            updateTitles();
        }

        function updateAriaLabels() {
            document.querySelectorAll('[aria-label]').forEach(el => {
                const ariaLabel = el.getAttribute('aria-label');
                if (ariaLabel) {
                    el.setAttribute('aria-label', ui[currentLang].nav[ariaLabel] || ariaLabel);
                }
            });
        }

        function updateAltTexts() {
            const themeIcon = document.getElementById('themeIcon');
            const langIcon = document.getElementById('langIcon');
            
            if (themeIcon) {
                themeIcon.alt = currentLang === 'es' ? "Cambiar tema" : "Change theme";
                themeIcon.title = currentLang === 'es' ? "Cambiar tema" : "Change theme";
            }
            if (langIcon) {
                langIcon.alt = currentLang === 'es' ? "Cambiar idioma" : "Change language";
                langIcon.title = currentLang === 'es' ? "Cambiar idioma" : "Change language";
            }
        }

        function updateTitles() {
            document.querySelectorAll('[title]').forEach(el => {
                const title = el.getAttribute('title');
                if (title) {
                    const [esTitle, enTitle] = title.split('|');
                    el.setAttribute('title', currentLang === 'es' ? esTitle.trim() : enTitle.trim());
                }
            });
        }

        function updateTheme() {
            if (currentTheme === 'dark') {
                document.documentElement.classList.add('dark');
                document.documentElement.classList.remove('light');
            } else {
                document.documentElement.classList.remove('dark');
                document.documentElement.classList.add('light');
            }
        }

        document.getElementById('langSwitch').addEventListener('click', switchLanguage);
        document.getElementById('themeSwitch').addEventListener('click', switchTheme);

        document.getElementById('menuToggle').addEventListener('click', () => {
            const navMenu = document.getElementById('navMenu');
            navMenu.classList.toggle('hidden');
        });

        // Aplicar el tema y el idioma inmediatamente al cargar la página
        updateTheme();
        updateContent();

        // Observar cambios en localStorage
        window.addEventListener('storage', (event) => {
            if (event.key === 'lang') {
                currentLang = event.newValue;
                updateContent();
            } else if (event.key === 'theme') {
                currentTheme = event.newValue;
                updateTheme();
            }
        });

        // Manejar cambios de idioma dentro de la misma página
        document.addEventListener('astro:language-changed', updateContent);

        // Agregar un observer para cambios en el DOM en caso de que el cambio de idioma modifique la estructura
        const observer = new MutationObserver(updateContent);
        observer.observe(document.body, { childList: true, subtree: true });
    </script>
</body>
</html>

<style>
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow-x: hidden;
    }
</style>