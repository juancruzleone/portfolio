---
import MainH2 from "../components/MainH2.astro"
import Label from "../components/contact/components/Label.astro"
import Input from "../components/contact/components/Input.astro"
import Textarea from "../components/contact/components/Textarea.astro"
import ButtonContact from "../components/contact/components/buttonContact.astro"
import SvgMail from "../../src/components/SvgMail.astro"
import SvgLinkedin from "../components/SvgLinkedin.astro"
import SvgGithub from "../components/SvgGithub.astro"
import Modal from "../components/contact/components/Modal.astro"

// Obtenemos las variables de entorno
const PUBLIC_KEY = import.meta.env.PUBLIC_EMAILJS_PUBLIC_KEY;
const SERVICE_ID = import.meta.env.PUBLIC_EMAILJS_SERVICE_ID;
const TEMPLATE_ID = import.meta.env.PUBLIC_EMAILJS_TEMPLATE_ID;
--- 

<section class="pl-6 mt-[60px]" id="contact">
    <MainH2 title="contact.title" />
    <div class="flex">
        <div class="w-[750px]">
            <form 
                id="contactForm"
                class="flex flex-col"
                onsubmit="return false;"
                data-public-key={PUBLIC_KEY}
                data-service-id={SERVICE_ID}
                data-template-id={TEMPLATE_ID}
            >
                <Label label="contact.email" />
                <Input name="email" type="email" required />
                <Label label="contact.message" />
                <Textarea name="message" required />     
                <button 
                    type="button" 
                    id="submitButton"
                    class="p-2 bg-black dark:bg-white text-white dark:text-black mb-10 font-monserrat font-light rounded mt-2 dark:hover:bg-[#d9d9d9] hover:bg-[#121212]"
                    data-i18n="contact.button"
                >
                    Enviar mensaje
                </button>
            </form>
        </div>
        
        <div class="mt-[5px]">
          <div class="hover:bg-[#2d2d2d] bg-black p-2 rounded cursor-pointer mt-[30px] ml-[60px] border border-contenedor w-[48px]">
            <SvgMail />
          </div>
          <div class="hover:bg-[#2d2d2d] bg-black p-2 rounded cursor-pointer mt-[30px] ml-[60px] border border-contenedor w-[48px]">
            <SvgLinkedin />
          </div>
          <div class="hover:bg-[#2d2d2d] bg-black p-2 rounded cursor-pointer mt-[28px] ml-[60px] border border-contenedor w-[48px]">
            <SvgGithub />
          </div>
        </div>
    </div>
    
    <Modal />
</section>

<script is:inline src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>

<script>
window.onload = function() {
    if (typeof emailjs !== 'undefined') {
        const form = document.getElementById('contactForm');
        const submitButton = document.getElementById('submitButton');
        const modal = document.querySelector('.modal');
        const closeButton = modal.querySelector('button');
        
        // Obtenemos las credenciales desde los data attributes
        const PUBLIC_KEY = form.dataset.publicKey;
        const SERVICE_ID = form.dataset.serviceId;
        const TEMPLATE_ID = form.dataset.templateId;
        
        // Inicializamos EmailJS con la public key desde las variables de entorno
        emailjs.init(PUBLIC_KEY);
        
        let isSubmitting = false;

        submitButton.addEventListener('click', async () => {
            if (isSubmitting) return;
            
            const emailInput = form.querySelector('input[name="email"]');
            const messageInput = form.querySelector('textarea[name="message"]');
            
            if (!emailInput.value || !messageInput.value) {
                alert('Por favor, completa todos los campos');
                return;
            }

            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(emailInput.value)) {
                alert('Por favor, ingresa un email válido');
                return;
            }

            try {
                isSubmitting = true;
                
                const originalButtonText = submitButton.innerHTML;
                submitButton.innerHTML = 'Enviando...';
                submitButton.disabled = true;

                const response = await emailjs.send(
                    SERVICE_ID,
                    TEMPLATE_ID,
                    {
                        from_name: emailInput.value,
                        to_name: "Juan Cruz",
                        message: messageInput.value,
                        email: emailInput.value,
                        to_email: "juancruzleone10@gmail.com"
                    }
                );

                if (response.status === 200) {
                    modal.classList.remove('hidden');
                    form.reset();
                } else {
                    throw new Error('Error al enviar el email');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Hubo un error al enviar el mensaje. Por favor, inténtalo de nuevo.');
            } finally {
                isSubmitting = false;
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
            }
        });

        closeButton.addEventListener('click', () => {
            modal.classList.add('hidden');
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.add('hidden');
            }
        });

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            return false;
        });
    } else {
        console.error('EmailJS no se ha cargado correctamente');
    }
};
</script>